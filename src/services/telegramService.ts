import { Elysia } from 'elysia';
import axios from 'axios';
import TelegramBot from 'node-telegram-bot-api';

//import { openaiService } from './openaiService'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
import { readFileSync } from 'fs';
import * as dotenv from 'dotenv';
import path from 'path';
dotenv.config({ path: __dirname + '/.env' });
// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

const token = process.env.BOT_TOKEN ?? '';
const bot = new TelegramBot(token, { polling: true });

const webHookUrl = process.env.WEBHOOK_URL;
const infoLink1 = 'https://platform.openai.com/docs/overview';
const infoLink2 = 'https://docs.pinecone.io/guides/get-started/overview';
const infoLink3 = 'https://help.openai.com/en/articles/8868588-retrieval-augmented-generation-rag-and-semantic-search-for-gpts';

interface QuizQuestions {
    id: string;
    query: string;
    answer: string;
}

interface Quiz {
    query: string;
    correctAnswer: string;
    options: TelegramBot.InlineKeyboardButton[][];
}


  
export const TelegramService = (app: Elysia, openai: { ragAnswer: (namespaceName: string, query: string) => Promise<string>; }) => {
    let rightAnswerCounter = 0;
    let counter: number = 0;

    const initializeBot = async () => {
        bot.setMyCommands([
            { command: '/start', description: '–ù–∞—á–Ω–µ–º!' },
            { command: '/dialog', description: '–ü–æ–≥–æ–≤–æ—Ä–∏–º?' },
            { command: '/test', description: '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞' },
            { command: '/quiz', description: '–ü—Ä–æ–π—Ç–∏ quiz' },
        ]);

        bot.on('message', async (msg) => {
            const text = msg.text || '';
            const chatId = msg.chat.id;

            if (text === '/start') {
                const first_name = msg.chat.first_name ? msg.chat.first_name : '–¥—Ä—É–≥';
                return start(chatId, first_name);
            } else if (text === '/quiz') {
                counter = 0;
                return quiz(chatId, 1);
            } else if (text === '/test') {
                counter = 1;
                return test(chatId, 1);
            } else if (!text.includes('/')) {
                if (counter > 0) {
                    return reply(chatId, text);
                } else {
                    return dialog(chatId, text);
                }
            }
        });

        bot.on('callback_query', async (query) => {
            const chatId = query.message?.chat?.id;
            if (!chatId) return;

            if (query.data == '/about') {
                await about(chatId);
            }

            if (query.data == '/info') {
                await info(chatId);
            }

            if (query.data === '/quiz') {
                counter = 0;
                await quiz(chatId, 1);
            }

            if (query.data == '/true') {
                await good(chatId);
            }

            if (query.data == '/false') {
                await bad(chatId);
            }

            if (query.data == '/exit') {
                await exit(chatId);
            }

            if (query.data == '/next') {
                await quiz(chatId, 2);
            }

            if (query.data?.includes('/dialog#')) {
                const text = getAfterHashRegex(query.data);
                console.log('1', text)
                if (text) {
                    await dialog(chatId, text);
                } else {
                    sendError(chatId)
                }
            }

            if (query.data?.includes('/dialogAnswer#')) {
                const text = getAfterHashRegex(query.data);
                console.log('2', text)
                if (text) {
                    await reply(chatId, text);
                } else {
                    sendError(chatId)
                }
            }


            bot.answerCallbackQuery(query.id);
        });
    };

    const start = async (chatId: number, first_name: string) => {
        counter = 0;
        await bot.sendMessage(
            chatId,
            `–ü—Ä–∏–≤–µ—Ç, ${first_name}!`,
            { parse_mode: 'HTML' },
        );

        bot.sendMessage(
            chatId,
            '–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ –¥–∞–ª—å—à–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
            {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '–û –±–æ—Ç–µ', callback_data: '/about' },
                            { text: '–°—Å—ã–ª–∫–∏ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', callback_data: '/info' },
                        ],

                        [{ text: '–ü–æ–≥–æ–≤–æ—Ä–∏–º?', callback_data: '/dialog#' }],
                        [{ text: 'üöÄ –ü—Ä–æ–π—Ç–∏ –∫–≤–∏–∑', callback_data: '/quiz' }],
                    ],
                    resize_keyboard: true,
                    one_time_keyboard: true,
                },
            },
        );
    }

    const about = async (chatId: number) => {
        awaitResponse(chatId);
        const aboutResponse = '–≠—Ç–æ—Ç –±–æ—Ç —Å–¥–µ–ª–∞–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ RAG –∏ OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –¥–æ–æ–±—É—á–µ–Ω–æ–π –º–æ–¥–µ–ª–∏ chatGPT.\n\n–ë–æ—Ç –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ ElysiaJS.\n\n<strong>–ü—Ä–æ–±–ª–µ–º–∞:</strong>\n –ü—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ chatGPT –≤–æ–∑–º–æ–∂–Ω—ã "–≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–∏", —Ç.–∫. –∫–æ–≥–¥–∞ –º–æ–¥–µ–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –æ–Ω–∞ –≤—ã–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ—Ö–æ–∂–∏–π –Ω–∞ –ø—Ä–∞–≤–¥—É, –Ω–æ –Ω–µ–≤–µ—Ä–Ω—ã–π.\n\n<strong>–†–µ—à–µ–Ω–∏–µ:</strong>\n–î–ª—è —Ä–µ—à–µ–Ω–∏—è —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º—ã —è –∏—Å–ø–æ–ª—å–∑—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é RAG - —Å–æ–∑–¥–∞–µ—Ç—Å—è  –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –∏ –æ–±—É—á–∞–µ—Ç—Å—è –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ. –ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –¥–∞–Ω–Ω—É—é —Ç–µ–º—É –∫ –∑–∞–ø—Ä–æ—Å—É –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞.\n\n–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ OpenAI GPT (–∏–ª–∏ –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å) –æ—Ç–≤–µ—á–∞–µ—Ç –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ.';

        bot.sendMessage(chatId, aboutResponse,
            {
                parse_mode: 'HTML', reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '–°—Å—ã–ª–∫–∏ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', callback_data: '/info' },
                        ]
                    ],
                    resize_keyboard: true,
                    one_time_keyboard: true,
                },
            });
    }

    const info = (chatId: number) => {
        awaitResponse(chatId);
        const infoResponse = `–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é OpenAI\n ${infoLink1}\n\nPinecone (–≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö)\n${infoLink2}\n\n –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ RAG\n ${infoLink3}`;

        bot.sendMessage(
            chatId,
            infoResponse,
            {
                parse_mode: 'HTML', reply_markup: {
                    inline_keyboard: [
                        [{ text: '–ü–æ–≥–æ–≤–æ—Ä–∏–º?', callback_data: '/dialog#' }],
                        [{ text: 'üöÄ –ü—Ä–æ–π—Ç–∏ –∫–≤–∏–∑', callback_data: '/quiz' }],
                    ],
                    resize_keyboard: true,
                    one_time_keyboard: true,
                },
            }
        );
    }



    const quiz = async (chatId: number, call: number) => {
        const quiz = await getQuiz();

        if (call == 1) {
          bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º!');
            await new Promise((resolve) => setTimeout(resolve, 1500));
        }
        const number = Math.floor(Math.random() * quiz.length - 1) + 1;
        counter = number;
        const question = quiz[number];
        await bot.sendMessage(chatId, `${question.query}`, {
            reply_markup: {
                inline_keyboard: question.options
            },
        });
    };

    const good = async (chatId: number) => {
        counter++;
        rightAnswerCounter++;
        bot.sendMessage(
            chatId,
            '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–π–¥–µ–º –∫–æ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É.',
            {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å', callback_data: '/next' },
                            { text: '–ó–∞–∫–æ–Ω—á–∏—Ç—å', callback_data: '/exit' },
                        ],
                    ],
                    one_time_keyboard: true,
                    resize_keyboard: true,
                },
            },
        );
    }

    const bad = async (chatId: number) => {
        counter++;
        bot.sendMessage(chatId, `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.`, {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å', callback_data: '/next' },
                        { text: '–ó–∞–∫–æ–Ω—á–∏—Ç—å', callback_data: '/exit' },
                    ],
                ],
                one_time_keyboard: true,
                resize_keyboard: true,
            },
        });
    }

    const test = async(chatId: number, call: number) => {
        const questCount = 10;
        const questions: QuizQuestions[] = await getQuestions('quiz.json');
        if (call == 1) {
          bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É! –Ø –∑–∞–¥–∞–º –≤–æ–ø—Ä–æ—Å, –∞ —Ç—ã –Ω–∞–ø–∏—à–µ—à—å –æ—Ç–≤–µ—Ç.');
        }  
        const number = Math.floor(Math.random() * questCount - 1) + 1;  
        const question = questions[number]; 
        counter = number;
        await bot.sendMessage(chatId, question.query);
      }
    
    const reply = async (chatId: number, answer: string) => {
        const questions: QuizQuestions[] = await getQuestions('quiz.json');
        const query = questions[counter].query;
        const queryAnswer = `–ù–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å ${query} –±—ã–ª –¥–∞–Ω –æ—Ç–≤–µ—Ç ${answer} –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å?`;
        counter = 0;
        return dialogAnswer(chatId, queryAnswer);
    }

    const awaitResponse = async (chatId: number) => {
        await bot.sendChatAction(chatId, 'typing');
    }

    const dialog = async (chatId: number, query: string) => {
        awaitResponse(chatId);
        const namespaceName = 'games';
        const questionText = query;
        const dialogResponse: string = await openai.ragAnswer(
            namespaceName,
            questionText
        );
        bot.sendMessage(chatId, dialogResponse);
    }

    const dialogAnswer = async (chatId: number, query: string) => {
        awaitResponse(chatId);
        const namespaceName = 'games';

        const dialogResponse = await openai.ragAnswer(
            namespaceName,
            query,
        );
        bot.sendMessage(chatId, dialogResponse);
    }

    const exit = async (chatId: number) => {
        await bot.sendMessage(
            chatId,
            `–¢—ã –º–æ–ª–æ–¥–µ—Ü! –û—Ç–≤–µ—Ç–∏–ª —Ö–æ—Ä–æ—à–æ –Ω–∞ ${rightAnswerCounter} –∏–∑ ${counter} –≤–æ–ø—Ä–æ—Å–æ–≤!`,
        );

        await bot.sendMessage(chatId, '–ü–æ–±–æ–ª—Ç–∞–µ–º?', {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '–î–∞!', callback_data: '/dialog#–Ø —Ö–æ—á—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ–± –∏–≥—Ä–∞—Ö' },
                        { text: '–ù–µ—Ç', callback_data: '/dialog#–Ø –Ω–µ —Ö–æ—á—É –æ–± –∏–≥—Ä–∞—Ö' },
                    ],
                ],
                one_time_keyboard: true,
                resize_keyboard: true,
            },
        });
    }


    const getQuestions = async (fileName:string): Promise<QuizQuestions[]> => {
        const questionsFilePath = path.join(__dirname, `articles/${fileName}`);
        const rawData = readFileSync(questionsFilePath, 'utf-8');
        const questions = JSON.parse(rawData);
        return questions;
    };


    const getQuiz = async (): Promise<Quiz[]> => {
        const questions: QuizQuestions[] = await getQuestions('quiz.json');
        const transformedQuestions: Quiz[] = questions.map((question) => {
            const correctAnswer = question.answer.split('.')[0]; 
            const otherQuestions = questions.filter(q => q.id !== question.id);
            const incorrectAnswers = otherQuestions.slice(0, 2).map(q => q.answer.split('.')[0]); 

            // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞
            const options = [
                [{ "text": incorrectAnswers[0], "callback_data": "/false" }],
                [{ "text": correctAnswer, "callback_data": "/true" }],
                [{ "text": incorrectAnswers[1], "callback_data": "/false" }]
            ];

            // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
            for (let i = options.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [options[i], options[j]] = [options[j], options[i]];
            }

            return {
                "query": question.query,
                "correctAnswer": correctAnswer,
                "options": options
            };
        });
        return transformedQuestions;
    };

    const sendError = async (chatId: number) => {
        await bot.sendMessage(chatId, `–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫`);
    }

    const getAfterHashRegex = (str: string) => {
        const match = str.match(/#(.*)/);
        if (match === null) {
            return null;
        }
        return match[1];
    }

    initializeBot();
}